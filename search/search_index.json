{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flipper is an animation library for Roblox based around Motors and Goals. Under Construction This page is under construction. Further reading This page is currently used to showcase call-outs. What's a call-out? Call-outs are these boxes that you are reading. Open me! These call-outs - also called admonitions - can also be expanded. You can close me (after reading!) They can also be collapsible and forced open, too. This docs page was made by @ShaneButt, @reselim, @jakebball11, and @zaiisao. We saw a need and decided to take the time to properly document this module. You can link to URLs and other pages It's really simple to link to other pages in call-outs. Just wrap your text with [ and ]({link}) where {link} is the URL or page to link to. Making new admonitions You can make newly styled admonitions by cloning the template file in stylesheets/admonitions and modifying the CSS of the exposed properties. Icons can be retrieved from the material-mkdocs GitHub page, under docs/.icons/ and then grabbing the SVG code of the icon you want. Then you replace the <svg>... code in the new .css file. License Flipper is licensed in full under the MIT license . Note that it contains code from another author, which is also under the MIT license.","title":"Home"},{"location":"#license","text":"Flipper is licensed in full under the MIT license . Note that it contains code from another author, which is also under the MIT license.","title":"License"},{"location":"installation/","text":"Installation Rojo 0.6.x+ Add this repository as a submodule into your packages directory. This example assumes the directory is packages . git submodule add https://github.com/Reselim/Flipper packages/Flipper 0.5.x Copy the src folder from this repository into your packages directory. npm (for roblox-ts) Install the @rbxts/flipper package using npm or yarn . npm i @rbxts/flipper Without Rojo Download the latest .rbxm file from the releases page and drag it into studio.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#rojo","text":"","title":"Rojo"},{"location":"installation/#06x","text":"Add this repository as a submodule into your packages directory. This example assumes the directory is packages . git submodule add https://github.com/Reselim/Flipper packages/Flipper","title":"0.6.x+"},{"location":"installation/#05x","text":"Copy the src folder from this repository into your packages directory.","title":"0.5.x"},{"location":"installation/#npm-for-roblox-ts","text":"Install the @rbxts/flipper package using npm or yarn . npm i @rbxts/flipper","title":"npm (for roblox-ts)"},{"location":"installation/#without-rojo","text":"Download the latest .rbxm file from the releases page and drag it into studio.","title":"Without Rojo"},{"location":"introduction/","text":"What is Motion? The traditional way in which we animate is with a set duration that mimics a set of movements over that set time. While this way of animating works but is very hard to control if you want fluid UI. For example, if I want a gui element to tween to where the player is holding his mouse I would need to have a very small duration but that would leave artifacts where the mouse is curently moving to the old position instead of the new one. This is only a small issue in the example I mentioned but can effect larger and more crucial animations if not dealt with. What is the solution? Motion based UI! This is fundamentally different as we give parameters of physical motion instead of duration. The most common and the most optimal form of motion is springs! What are springs? Springs are the best way to show motion as they have a very natural feel and look by default. Springs are used all around us in our daily lives such as pushing on the brake pedal in your car targeting your crosshair in an FPS game turning on the gas for your fire place Much more! This means having them be used in visible motion is naturally very clean. They also can be configured to mimic common time based easing styles which can be viewed in the API reference under springs. The most optimal spring library in roblox is fraktality's spr . Further reading If you want more info on how springs work here is the offical react spring's page However, using this when animating an object can get pretty tough to manage esepcially when there is no overarching structure to it all. Thats where Flipper comes in! What is Flipper? Flipper ties up all of these concepts into a neat little package that is easy to integrate with a very simple API. It also naturally works great with Roact and Bindings!","title":"Introduction"},{"location":"api/reference/","text":"","title":"Reference"},{"location":"api/goals/Instant/","text":"Methods Instant.new local Instant = Instant . new ( TargetValue ) This function will create a new instant goal with a specified target value. Instant:step() local state = Instant : step () This function will step the current goal to the ending state and then return a table of the current state. The table consists of complete and value keys. local state = Instant : step () print ( \"is complete: \" .. complete ) print ( \"current alpha: \" .. value ) Warning This is the only goal that doesnt require any paremeters due to it being instant.","title":"Instant"},{"location":"api/goals/Linear/","text":"Methods Linear.new local Linear = Linear . new ( TargetValue , [ options ]) This function will create a new linear goal with a specified target value. The second parameter is an optional table that specifies the velocity. If nothing is passed as the second parameter it will default the velocity to 1. local Linear = Linear . new ( TargetValue , { velocity = 1 }) Linear:step() Linear : step ( value , dt ) This function will step the current goal to the specified value and return a table consisting of a complete , value and velocity local state = Linear : step ( value , dt ) print ( \"is complete: \" .. state . complete ) print ( \"alpha is: \" .. state . complete ) print ( \"velocity is: \" .. state . velocity )","title":"Linear"},{"location":"api/goals/Spring/","text":"","title":"Spring"},{"location":"api/motors/GroupMotor/","text":"","title":"GroupMotor"},{"location":"api/motors/SingleMotor/","text":"","title":"SingleMotor"},{"location":"core-concepts/extensibility/","text":"","title":"Extensibility"},{"location":"core-concepts/motors-goals/","text":"","title":"Motors and Goals"},{"location":"using-flipper/flipper-geometry/","text":"","title":"Flipper in Geometry"},{"location":"using-flipper/flipper-ui/","text":"","title":"Flipper in UI"},{"location":"using-flipper/flipper-roact/roact-flipper/","text":"","title":"Roact-Flipper"},{"location":"using-flipper/flipper-roact/roact-standard/","text":"","title":"Roact Standard"}]}